
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftDISJleftCONJleftEQEQEXCL_EQnonassocLANGLERANGLELEGEleftADDSUBleftMULTDIVMODrightEXCL_NO_WSADD AS ASSIGNMENT BOOLEAN_LITERAL BREAK CHARACTER_LITERAL CLASS COLON COMMA CONJ CONTINUE DISJ DIV DOT ELSE EQEQ EXCL_EQ EXCL_NO_WS FLOAT_LITERAL FOR FUN GE IDENTIFIER IF IN INTEGER_LITERAL IS LANGLE LCURL LE LINE_STR_TEXT LPAREN LSQUARE MOD MULT MULTI_LINE_STR_TEXT NULL_LITERAL QUEST_NO_WS RANGLE RCURL RETURN RPAREN RSQUARE SEMICOLON SUB VAL VAR WHEN WHILEelvis : QUEST_NO_WS COLONprimaryExpression : literalConstant\n    | stringLiteralliteralConstant : INTEGER_LITERAL\n    | FLOAT_LITERAL\n    | BOOLEAN_LITERAL\n    | CHARACTER_LITERAL\n    | NULL_LITERALstringLiteral : lineStringLiteral\n    | multiLineStringLiterallineStringLiteral : LINE_STR_TEXTmultiLineStringLiteral : MULTI_LINE_STR_TEXTjumpExpression : CONTINUE\n    | BREAKequalityOperator : EXCL_EQ\n    | EQEQcomparisonOperator : LANGLE\n    | RANGLE\n    | LE\n    | GEinOperator : INisOperator : ISadditiveOperator : ADD\n    | SUBmultiplicativeOperator : MULT\n    | DIV\n    | MODasOperator : ASexcl : EXCL_NO_WSmemberAccessOperator : DOT\n    | safeNavsafeNav : QUEST_NO_WS DOT'
    
_lr_action_items = {'QUEST_NO_WS':([0,],[2,]),'$end':([1,3,],[0,-1,]),'COLON':([2,],[3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'elvis':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> elvis","S'",1,None,None,None),
  ('elvis -> QUEST_NO_WS COLON','elvis',2,'p_elvis','kotlin_parser.py',26),
  ('primaryExpression -> literalConstant','primaryExpression',1,'p_primaryExpression','kotlin_parser.py',31),
  ('primaryExpression -> stringLiteral','primaryExpression',1,'p_primaryExpression','kotlin_parser.py',32),
  ('literalConstant -> INTEGER_LITERAL','literalConstant',1,'p_literalConstant','kotlin_parser.py',37),
  ('literalConstant -> FLOAT_LITERAL','literalConstant',1,'p_literalConstant','kotlin_parser.py',38),
  ('literalConstant -> BOOLEAN_LITERAL','literalConstant',1,'p_literalConstant','kotlin_parser.py',39),
  ('literalConstant -> CHARACTER_LITERAL','literalConstant',1,'p_literalConstant','kotlin_parser.py',40),
  ('literalConstant -> NULL_LITERAL','literalConstant',1,'p_literalConstant','kotlin_parser.py',41),
  ('stringLiteral -> lineStringLiteral','stringLiteral',1,'p_stringLiteral','kotlin_parser.py',46),
  ('stringLiteral -> multiLineStringLiteral','stringLiteral',1,'p_stringLiteral','kotlin_parser.py',47),
  ('lineStringLiteral -> LINE_STR_TEXT','lineStringLiteral',1,'p_lineStringLiteral','kotlin_parser.py',52),
  ('multiLineStringLiteral -> MULTI_LINE_STR_TEXT','multiLineStringLiteral',1,'p_multiLineStringLiteral','kotlin_parser.py',57),
  ('jumpExpression -> CONTINUE','jumpExpression',1,'p_jumpExpression','kotlin_parser.py',62),
  ('jumpExpression -> BREAK','jumpExpression',1,'p_jumpExpression','kotlin_parser.py',63),
  ('equalityOperator -> EXCL_EQ','equalityOperator',1,'p_equalityOperator','kotlin_parser.py',68),
  ('equalityOperator -> EQEQ','equalityOperator',1,'p_equalityOperator','kotlin_parser.py',69),
  ('comparisonOperator -> LANGLE','comparisonOperator',1,'p_comparisonOperator','kotlin_parser.py',74),
  ('comparisonOperator -> RANGLE','comparisonOperator',1,'p_comparisonOperator','kotlin_parser.py',75),
  ('comparisonOperator -> LE','comparisonOperator',1,'p_comparisonOperator','kotlin_parser.py',76),
  ('comparisonOperator -> GE','comparisonOperator',1,'p_comparisonOperator','kotlin_parser.py',77),
  ('inOperator -> IN','inOperator',1,'p_inOperator','kotlin_parser.py',82),
  ('isOperator -> IS','isOperator',1,'p_isOperator','kotlin_parser.py',87),
  ('additiveOperator -> ADD','additiveOperator',1,'p_additiveOperator','kotlin_parser.py',92),
  ('additiveOperator -> SUB','additiveOperator',1,'p_additiveOperator','kotlin_parser.py',93),
  ('multiplicativeOperator -> MULT','multiplicativeOperator',1,'p_multiplicativeOperator','kotlin_parser.py',98),
  ('multiplicativeOperator -> DIV','multiplicativeOperator',1,'p_multiplicativeOperator','kotlin_parser.py',99),
  ('multiplicativeOperator -> MOD','multiplicativeOperator',1,'p_multiplicativeOperator','kotlin_parser.py',100),
  ('asOperator -> AS','asOperator',1,'p_asOperator','kotlin_parser.py',105),
  ('excl -> EXCL_NO_WS','excl',1,'p_excl','kotlin_parser.py',123),
  ('memberAccessOperator -> DOT','memberAccessOperator',1,'p_memberAccessOperator','kotlin_parser.py',128),
  ('memberAccessOperator -> safeNav','memberAccessOperator',1,'p_memberAccessOperator','kotlin_parser.py',129),
  ('safeNav -> QUEST_NO_WS DOT','safeNav',2,'p_safeNav','kotlin_parser.py',134),
]
